\import Algebra.Ring.Sub
\import Arith.Nat
\import Data.Array (Big)
\import Data.List
\import Data.Maybe
\import Logic
\import Logic.Meta
\import Meta
\import Order.Lattice
\import Order.LinearOrder
\import Paths.Meta
\import lect06 (Decide, no, yes)
\import lect09

-- 1. Определите отношение многошаговой редукции на Term.

\data Red-Chain {V : \Set} (t s : Term V)
  | red-refl (t = s)
  | red-trans {z : Term V} (Red-Chain t z) (Red-Chain z s)

\func Red {V : \Set} (t s : Term V) : \Type => Red-Chain t s

-- 2. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--    Определите любую стратегию редукции.

\func strategy {V : \Set} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) \elim t
  | var v => no (\lam (s, r) => \case s \as s', r : Red1 (var v) s' \with {})
  | app t1 t2 => \case strategy t1, strategy t2 \with {
    | yes a, _ => yes (app a.1 t2, app-left a.2 idp)
    | _, yes a => yes (app t1 a.1, app-right idp a.2)
    | no n, no n1 => \case isLam t1 \with {
      | yes (b, t1=lamb) => yes (b >>= maybe t2 var , rewrite t1=lamb (beta {_} {lam b} idp idp))
      | no n2 => no (\lam _x => \case _x \with {
        | (var v,r) => \case r \with {
          | beta {f} p p1 => n2 (f, p)
        }
        | (app t t3,r) => \case r \with {
          | beta {f} p p1 => n2 (f, p)
          | app-left r1 p => n (t, r1)
          | app-right p r1 => n1 (t3, r1)
        }
        | (lam t,r) => \case r \with {
          | beta {f} p p1 => n2 (f, p)
        }
        | (unit,r) => \case r \with {
          | beta {f} p p1 => n2 (f, p)
        }
      })
    }
  }
  | lam t => \case strategy t \with {
    | yes a => yes (lam a.1, lam-red a.2)
    | no n => no (\lam _x => \case _x \with {
      | (lam s, lam-red s') => n (s, s')
      | (var v,r) => \case r \with {}
      | (app t1 t2,r) => \case r \with {}
      | (unit,r) => \case r \with {}
    })
  }
  | unit => no (\lam (s, r) => \case s \as s', r : Red1 unit s' \with {})
  \where {
    \func isLam {V : \Set} (t : Term V) : Decide (\Sigma (b : Term (Maybe V)) (t = lam b)) \elim t
      | var v => no (\lam _x => \case _x.2 \with {})
      | app t1 t2 => no (\lam _x => \case _x.2 \with {})
      | lam t => yes (t, idp)
      | unit => no (\lam _x => \case _x.2 \with {})
  }


\func strategy2 {V : \Set} (t : Term V) : List (\Sigma (s : Term V) (Red1 t s)) \elim t
  | var v => nil
  | unit => nil
  | app t1 t2 =>
    map (\lam (s, r) => (app s t2, app-left r idp)) (strategy2 t1) ++
    map (\lam (s, r) => (app t1 s, app-right idp r)) (strategy2 t2) ++
    (\case isLam t1 \with {
      | yes a => rewrite a.2 ((_, beta idp idp) :: nil)
      | no n => nil
    })
  | lam t => map (\lam (s, r) => (lam s, lam-red r)) (strategy2 t)
  \where {
    \func isLam {V : \Set} (t : Term V) : Decide (\Sigma (b : Term (Maybe V)) (t = lam b)) \elim t
      | var v => no (\lam _x => \case _x.2 \with {})
      | app t1 t2 => no (\lam _x => \case _x.2 \with {})
      | lam t => yes (t, idp)
      | unit => no (\lam _x => \case _x.2 \with {})
  }
-- 3. Докажите, что подтермы достижимого терма достижимы.

\func appAccLeft {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t \elim a
  | acc _x => acc (\lam {t'} r => appAccLeft (_x {app t' s} (app-left r idp)))

\func appAccRight {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 s \elim a
  | acc _x => acc (\lam {s'} r => appAccRight (_x {app t s'} (app-right idp r)))

\func subLamAcc {V : \Set} {t : Term (Maybe V)} (a : Acc Red1 (lam t)) : Acc Red1 t \elim a
  | acc _x => acc (\lam {a'} r => subLamAcc (_x {lam a'} (lam-red r)))

-- 4. Определите функцию, которая по достижимому терму возвращает длину максимальной цепочки редукций из него.

\func red-length {V : \Set} (t : Term V) (acc : Acc Red1 t) : Nat \elim acc
  | acc _x => red-length-lemma t (acc _x) (strategy2 t) 0
  \where {
    \func red-length-lemma {V : \Set} (t : Term V) (acc : Acc Red1 t) (reds : List (\Sigma (s : Term V) (Red1 t s))) (curMax : Nat) : Nat \elim acc, reds
      | acc _x, nil => curMax
      | acc _x, r :: reds =>
        \let
          | curValue => suc (red-length-lemma r.1 (_x r.2) (strategy2 r.1) 0)
          | newValue : Nat => \case NatSemiring.trichotomy curMax curValue \with {
            | less _ => curValue
            | _ => curMax
          }
        \in red-length-lemma t (acc _x) reds newValue
  }


-- 5. Докажите, что нейтральные термы замкнуты относительно редукций.

\func neutralRed {V : \Set} {t s : Term V} (r : Red1 t s) (n : Neutral t) : Neutral s \elim t, s, r, n
  | app t t1, s, beta p p1, neutral-app n a => \case rewrite p in n \with {}
  | app t t1, app s s1, app-left r p, neutral-app n a => neutral-app (neutralRed r n) (rewrite p in a)
  | app t t1, app s s1, app-right p r, neutral-app n (acc _x) => neutral-app (rewrite p in n) (_x r)

-- 6. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func substLem {U V : \Set} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b TermMonad.>>= a) B
  => {?}

\func substLem1 => {?}

-- 7. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func redLem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A
  => {?}

-- Optional
-- 8. Для доказательства typeableInterp понадобится вспомогательное утверждение. Докажите его.

\func redInterp {V : \Set} {a t s : Term V} {T : Type} (r : HeadRed a t s) (acc : Acc Red1 a) (q : Interp T s) : Interp T t
  => {?}
