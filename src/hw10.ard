\import Data.Bool
\import Data.List
\import Function.Meta
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import Prelude (suc, Nat, =, idp)
\import lect06 (Decide, no, yes)
\import lect10

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций
\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g `o` f) => \lam {x} {y} p1 => p (q p1)

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f =>
  \lam {x} {y} p1 => p (pmap g p1)

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.


\func isMultipleOf3 (n : Nat) : Bool =>
  \case mod3 n \with {
    | 0 => true
    | suc _ => false
  }

\func isMultipleOf5 (n : Nat) : Bool =>
  \case mod5 n \with {
    | 0 => true
    | suc _ => false
  }

\func isMultipleOf3Or5 (n : Nat) : \Type =>
  Or (So (isMultipleOf3 n)) (\Sigma (Not (So (isMultipleOf3 n))) (So (isMultipleOf5 n)))

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) =>
  \lam x y => \case \elim x, \elim y \with {
    | inl a, inl a1 => pmap inl So-lem
    | inl a, inr b => absurd (b.1 a)
    | inr b, inl a => absurd (b.1 a)
    | inr b, inr b1 => pmap inr ((Sigma-isProp (Impl-isProp Empty-isProp) (\lam _ _ => So-lem)) b b1)
  }

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc => \lam p => sigmaEq p (isMultipleOf3Or5-isProp _ _ _)

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A) =>
  (\lam i => (\lam x y => (inv $ i.2 x) *> i.2 y, i.1), \lam _x => (_x.2, _x.1 _x.2))

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Or A B)) : Empty =>
  \let
    | t1 => p Unit-isProp Unit-isProp
  \in \case t1 (inl ()) (inr ()) \with {}

-- 5. Докажите, что LessOrEq является предикатом.

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) =>
  \lam x y => LessOrEq-isProp-lemma x y
  \where {
    \func LessOrEq-isProp-lemma {n m : Nat} (x y : LessOrEq n m) : x = y \elim n, m, x, y {
      | 0, m, z<=n, z<=n => idp
      | suc n, suc m, s<=s x, s<=s y => pmap s<=s (LessOrEq-isProp-lemma {n} {m} x y)
    }
  }

-- 6. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m
  \where {
    \func n<n->Empty {n : Nat} (p : So (n < n)) : Empty \elim n, p
      | suc n, p => n<n->Empty p
  }

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => So (x < y)) n m) =>
  \lam x y => \case \elim x, \elim y \with {
    | refl p, refl p1 => pmap {n = m} refl  (\case \elim n, \elim p \with {
      | n, idp => \case \elim m, \elim p1 \with {
        | m, idp => idp
      }
    } )
    | refl p, inc r => absurd (<.n<n->Empty (rewrite p in r))
    | inc r, refl p => absurd (<.n<n->Empty (rewrite p in r))
    | inc r, inc r1 => pmap inc So-lem
  }

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty =>
  \case (p 0 0) (refl idp) (inc z<=n) \with {}

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A => \lam x y => p (q (f x) (f y))

-- 8. Докажите, что тип с разрешимым равенством являетя множеством.

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A
  => setLem (\lam x y => \case dec x y \with {
    | yes a => \Sigma
    | no n => Empty
  }) (\lam x y => mcases \with {
    | yes a => Unit-isProp
    | no n => Empty-isProp
  }) (\lam a => mcases \with {
    | yes a1 => ()
    | no n => n idp
  }) (\lam {a} {a'} => mcases \with {
    | yes a1 => \lam _x => a1
    | no n => \lam _x => absurd _x
  })

-- 9. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Or A B) =>
  setLem {Or A B} (\lam x y => \case \elim x, \elim y \with {
    | inl a, inl a1 => a = a1
    | inr b, inr b1 => b = b1
    | _, _ => Empty
  }) (\lam x y => mcases \with {
    | inl a, inl a1 => p a a1
    | inr b, inr b1 => q b b1
    | x1, y1 => Empty-isProp
  }) (\lam a => \case \elim a \with {
    | inl a1 => idp
    | inr b => idp
  }) (\lam {a} {a'} => mcases \with {
    | inl a1, inl a2 => \lam p => rewrite p idp
    | inr b, inr b1 => \lam p => rewrite p idp
    | x, y => \lam e => absurd e
  })

-- 10. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x) =>
  setLem {\Pi (x : A) -> B x}
      (\lam f g => \Pi (x : A) -> f x = g x)
      (\lam a a' => forall-isProp (\lam x => a x = a' x) (\lam x => p x (a x) (a' x)))
      (\lam a x => idp)
      (\lam {a} {a'} g => \lam i a => g a i)

-- 11. Докажите, что если A является множеством, то List A также им является.

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A)
  => setLem list= (\lam x y => List-isSet-lemma pA x y) List-isSet-lemma' List-isSet-lemma''
  \where {
    \func list= {A : \Type} (x y : List A) : \Type \elim x, y
      | nil, nil => \Sigma
      | nil, a :: y => Empty
      | a :: x, nil => Empty
      | a :: x, a1 :: y => \Sigma (a = a1) (list= x y)

    \func List-isSet-lemma {A : \Type} (pA : isSet A) (x y : List A) : isProp (list= x y) \elim x, y
      | nil, nil => Unit-isProp
      | nil, a :: y => Empty-isProp
      | a :: x, nil => Empty-isProp
      | a :: x, a1 :: y => Sigma-isProp (pA a a1) (List-isSet-lemma pA x y)

    \func List-isSet-lemma' {A : \Type} (a : List A) : list= a a \elim a
      | nil => ()
      | a :: a1 => (idp, List-isSet-lemma' a1)

    \func List-isSet-lemma'' {A : \Type} {a a' : List A} (l : list= a a') : a = a' \elim a, a', l
      | nil, nil, _ => idp
      | a :: a1, a2 :: a', (p, l) => rewrite p (pmap (\lam x => a2 :: x) (List-isSet-lemma'' l))
  }