\import Data.Bool
\import Data.List
\import Data.Maybe
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import Prelude (=, Fin, Nat, idp)
\import hw04
\import hw06 (In)
\import lect07

-- 1. Определите функцию swap несколькими способами.

-- При помощи \cowith и доступа к полям.

\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => p.snd_
  | snd_ => p.fst_

-- При помощи \new и паттерн матчинга.

\func swap' {A B : \Type} (p : Pair A B) : Pair B A \elim p
  | (a,b) => \new Pair {
    | fst_ => b
    | snd_ => a
  }

-- При помощи \new и доступа к полям.

\func swap'' {A B : \Type} (p : Pair A B) : Pair B A => \new Pair {
  | fst_ => p.snd_
  | snd_ => p.fst_
}

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p \elim p
  | (a,b) => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\func zero-isNotPos (p : PosNat 0) : Empty => \case p.p \with {}

\func one-isPos : PosNat 1 => \new PosNat {
  | p => ()
}

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\record ExistsMod (a b k : Nat) (not1 : Not (k = 1)) (d1 d2 : Nat) (p1 : a = d1 * k) (p2 : b = d2 * k)

\record Dividors (n : Nat) (m : Nat) (p : Not (ExistsMod n m))

\func Dividors60 => Dividors 60
-- 5. Закончите определение класса монад. Этот класс должен содержать все монадные законы и реализовывать все поля из класса функторов.

\class Monad \extends Functor
  | return {A : \Set} : A -> F A
  | \infixl 1 >>= {A B : \Set} : F A -> (A -> F B) -> F B

  | >>=-left-id {A B : \Set} (a : A) (f : A -> F B) : (return a >>= f) = f a
  | >>=-right-id {A : \Set} (m : F A) : (m >>= return) = m
  | >>=-assoc {A B C : \Set} (m : F A) (f : A -> F B) (g : B -> F C) : ((m >>= f) >>= g) = (m >>= (\lam n => f n >>= g))

  | fmap => \lam f fa => >>= fa (\lam a => return (f a))
  | fmap-id => \lam x => unfold fmap (>>=-right-id x)
  | fmap-comp {A B C : \Set} => \lam f g x => unfold fmap (inv (>>=-assoc x (\lam (a : A) => return (f a)) (\lam (a : B) => return (g a)) *> pmap (\lam z => x >>= z) (ext (\lam a => >>=-left-id (f a) _))))

-- 6. Определите \instance Monad для Maybe.

\instance MaybeMonad : Monad Maybe => \new Monad {
  | return => Maybe.just
  | >>= => \lam m f => \case m \with {
    | nothing => nothing
    | just a => f a
  }
  | >>=-left-id => \lam _ _ => idp
  | >>=-right-id => \lam m => mcases \with {
    | nothing => idp
    | just a => idp
  }
  | >>=-assoc => \lam m f g => cases m \with {
    | nothing => idp
    | just a => cases (f a) \with {
      | nothing => idp
      | just a1 => idp
    }
  }
}

-- 7. Определите \instance Monad для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\instance StateMonad (S : \Set) : Monad (State S) => \new Monad {
  | return => \lam a => \new State {
    | state => \lam s => (s, a)
  }
  | >>= {A} {B} => \lam (s : State S A) (f : A -> State S B) => \new State {
    | state => \lam s1 =>
        \let
          | z => s.state s1
          | z2 : State S B => f z.2
        \in z2.state z.1
  }
  | >>=-left-id => \lam a f => idp
  | >>=-right-id => \lam m => idp
  | >>=-assoc => \lam m f g => idp
}

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

\instance State'Monad (S : \Set) : Monad (State' S) => \new Monad {
  | return => \lam a => state' (\lam s => (s, a))
  | >>= => \lam (state' new_s) f => state' (\lam s' => \let (s'', a) => new_s s' \in \case f a \with {
    | state' _x => _x s''
  })
  | >>=-left-id => \lam a f => cases (f a) \with {
    | state' _x => idp
  }
  | >>=-right-id => \lam m => mcases idp
  | >>=-assoc {A} {B} {C} => \lam m f g => cases m \with {
    | state' _x => pmap state' (ext (\lam s => cases (_x s, f (_x s).2) idp))
  }
}